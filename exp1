#include <iostream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

class Complex {
private:
    double real;  
    double imag; 

public:
    Complex(double r = 0, double i = 0) : real(r), imag(i) {}
    double getReal() const { return real; }
    double getImag() const { return imag; }
    void setReal(double r) { real = r; }
    void setImag(double i) { imag = i; }
    double modulus() const {
        return sqrt(real * real + imag * imag);
    }
    bool operator==(const Complex& other) const {
        return (real == other.real && imag == other.imag);
    }
    bool operator!=(const Complex& other) const {
        return !(*this == other);
    }
    void display() const {
        if (imag >= 0)
            cout << real << " + " << imag << "i";
        else
            cout << real << " - " << -imag << "i";
    }
};
Complex generateRandomComplex(double min, double max) {
    double real = min + (max - min) * rand() / RAND_MAX;
    double imag = min + (max - min) * rand() / RAND_MAX;
    return Complex(real, imag);
}
vector<Complex> generateRandomComplexVector(int size, double min, double max) {
    vector<Complex> vec;
    for (int i = 0; i < size; ++i) {
        vec.push_back(generateRandomComplex(min, max));
    }
    return vec;
}
void shuffleVector(vector<Complex>& vec) {
    srand(time(0));
    for (int i = vec.size() - 1; i > 0; --i) {
        int j = rand() % (i + 1);
        swap(vec[i], vec[j]);
    }
}
vector<int> findComplex(const vector<Complex>& vec, const Complex& target) {
    vector<int> indices;
    for (int i = 0; i < vec.size(); ++i) {
        if (vec[i] == target) {
            indices.push_back(i);
        }
    }
    return indices;
}
void insertComplex(vector<Complex>& vec, int position, const Complex& c) {
    if (position >= 0 && position <= vec.size()) {
        vec.insert(vec.begin() + position, c);
    } else {
        cout << "插入位置无效！" << endl;
    }
}
bool deleteComplex(vector<Complex>& vec, const Complex& c) {
    for (auto it = vec.begin(); it != vec.end(); ++it) {
        if (*it == c) {
            vec.erase(it);
            return true;
        }
    }
    return false;
}
void uniqueVector(vector<Complex>& vec) {
    vector<Complex> temp;
    for (const auto& c : vec) {
        bool found = false;
        for (const auto& t : temp) {
            if (c == t) {
                found = true;
                break;
            }
        }
        if (!found) {
            temp.push_back(c);
        }
    }
    vec = temp;
}
bool compareComplex(const Complex& a, const Complex& b) {
    if (a.modulus() != b.modulus()) {
        return a.modulus() < b.modulus();
    }
    return a.getReal() < b.getReal();
}

void bubbleSort(vector<Complex>& vec) {
    int n = vec.size();
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (!compareComplex(vec[j], vec[j + 1])) {
                swap(vec[j], vec[j + 1]);
            }
        }
    }
}

void merge(vector<Complex>& vec, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    
    vector<Complex> L(n1), R(n2);
    
    for (int i = 0; i < n1; ++i)
        L[i] = vec[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = vec[mid + 1 + j];
    
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (compareComplex(L[i], R[j])) {
            vec[k] = L[i];
            i++;
        } else {
            vec[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        vec[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2) {
        vec[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<Complex>& vec, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        
        mergeSort(vec, left, mid);
        mergeSort(vec, mid + 1, right);
        
        merge(vec, left, mid, right);
    }
}

vector<Complex> rangeSearch(const vector<Complex>& vec, double m1, double m2) {
    vector<Complex> result;
    for (const auto& c : vec) {
        double mod = c.modulus();
        if (mod >= m1 && mod < m2) {
            result.push_back(c);
        }
    }
    return result;
}

void displayVector(const vector<Complex>& vec) {
    for (const auto& c : vec) {
        c.display();
        cout << " (模: " << c.modulus() << "), ";
    }
    cout << endl;
}

int main() {
    srand(time(0)); 

    vector<Complex> complexVec = generateRandomComplexVector(10, -10, 10);
    cout << "原始向量: ";
    displayVector(complexVec);

    shuffleVector(complexVec);
    cout << "置乱后向量: ";
    displayVector(complexVec);

    if (!complexVec.empty()) {
        Complex target = complexVec[0];
        cout << "查找 ";
        target.display();
        cout << ": ";
        vector<int> indices = findComplex(complexVec, target);
        if (indices.empty()) {
            cout << "未找到" << endl;
        } else {
            cout << "找到位置: ";
            for (int idx : indices) {
                cout << idx << " ";
            }
            cout << endl;
        }
    }
    Complex insertVal(100, 200);
    insertComplex(complexVec, 2, insertVal);
    cout << "插入 ";
    insertVal.display();
    cout << " 后的向量: ";
    displayVector(complexVec);
    bool deleted = deleteComplex(complexVec, insertVal);
    if (deleted) {
        cout << "删除 ";
        insertVal.display();
        cout << " 后的向量: ";
        displayVector(complexVec);
    }
    uniqueVector(complexVec);
    cout << "唯一化后的向量: ";
    displayVector(complexVec);
    int testSize = 10000;
    vector<Complex> testVec = generateRandomComplexVector(testSize, -100, 100);
    vector<Complex> bubbleShuffled = testVec;
    vector<Complex> mergeShuffled = testVec;
    clock_t start = clock();
    bubbleSort(bubbleShuffled);
    clock_t bubbleShuffledTime = clock() - start;
    start = clock();
    mergeSort(mergeShuffled, 0, mergeShuffled.size() - 1);
    clock_t mergeShuffledTime = clock() - start;
    vector<Complex> bubbleSorted = bubbleShuffled; 
    vector<Complex> mergeSorted = mergeShuffled; 
    start = clock();
    bubbleSort(bubbleSorted);
    clock_t bubbleSortedTime = clock() - start;
    
    start = clock();
    mergeSort(mergeSorted, 0, mergeSorted.size() - 1);
    clock_t mergeSortedTime = clock() - start;
    vector<Complex> bubbleReversed = bubbleSorted;
    vector<Complex> mergeReversed = mergeSorted;
    reverse(bubbleReversed.begin(), bubbleReversed.end());
    reverse(mergeReversed.begin(), mergeReversed.end());
    start = clock();
    bubbleSort(bubbleReversed);
    clock_t bubbleReversedTime = clock() - start;
    start = clock();
    mergeSort(mergeReversed, 0, mergeReversed.size() - 1);
    clock_t mergeReversedTime = clock() - start;

    cout << "\n排序效率比较 (向量大小: " << testSize << "):" << endl;
    cout << "乱序情况:" << endl;
    cout << "  起泡排序: " << (double)bubbleShuffledTime / CLOCKS_PER_SEC << " 秒" << endl;
    cout << "  归并排序: " << (double)mergeShuffledTime / CLOCKS_PER_SEC << " 秒" << endl;
    cout << "顺序情况:" << endl;
    cout << "  起泡排序: " << (double)bubbleSortedTime / CLOCKS_PER_SEC << " 秒" << endl;
    cout << "  归并排序: " << (double)mergeSortedTime / CLOCKS_PER_SEC << " 秒" << endl;
    cout << "逆序情况:" << endl;
    cout << "  起泡排序: " << (double)bubbleReversedTime / CLOCKS_PER_SEC << " 秒" << endl;
    cout << "  归并排序: " << (double)mergeReversedTime / CLOCKS_PER_SEC << " 秒" << endl;
    vector<Complex> sortedVec = generateRandomComplexVector(20, 0, 10);
    mergeSort(sortedVec, 0, sortedVec.size() - 1); 
    cout << "\n用于区间查找的有序向量: ";
    displayVector(sortedVec);
    double m1 = 3.0, m2 = 7.0;
    vector<Complex> rangeResult = rangeSearch(sortedVec, m1, m2);
    cout << "模介于 [" << m1 << ", " << m2 << ") 的元素: ";
    displayVector(rangeResult);
    return 0;
}
